{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Dell Precision\\\\Documents\\\\ReactNativeDemo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell Precision\\\\Documents\\\\ReactNativeDemo\\\\my-app\\\\src\\\\features\\\\event\\\\eventDashboard\\\\EventDashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport EventList from '../EventList/EventList';\nimport EventForm from '../EventForm/EventForm';\nimport cuid from 'cuid';\nconst eventsFromDashboard = [{\n  id: '1',\n  title: 'Trip to Tower of London',\n  date: '2018-03-27',\n  category: 'culture',\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\n  city: 'London, UK',\n  venue: \"Tower of London, St Katharine's & Wapping, London\",\n  hostedBy: 'Bob',\n  hostPhotoURL: 'https://randomuser.me/api/portraits/men/20.jpg',\n  attendees: [{\n    id: 'a',\n    name: 'Bob',\n    photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\n  }, {\n    id: 'b',\n    name: 'Tom',\n    photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\n  }]\n}, {\n  id: '2',\n  title: 'Trip to Punch and Judy Pub',\n  date: '2018-03-28',\n  category: 'drinks',\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\n  city: 'London, UK',\n  venue: 'Punch & Judy, Henrietta Street, London, UK',\n  hostedBy: 'Tom',\n  hostPhotoURL: 'https://randomuser.me/api/portraits/men/22.jpg',\n  attendees: [{\n    id: 'b',\n    name: 'Tom',\n    photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\n  }, {\n    id: 'a',\n    name: 'Bob',\n    photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\n  }]\n}];\n\nclass EventDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: eventsFromDashboard,\n      isOpen: false,\n      selectedEvent: null\n    };\n\n    this.handleCreateFormOpen = () => {\n      this.setState({\n        isOpen: true,\n        selectedEvent: null\n      });\n    };\n\n    this.handleFormCancel = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.handleCreateEvent = newEvent => {\n      newEvent.id = cuid();\n      newEvent.hostPhotoURL = '/assets/user.png';\n      this.setState(({\n        events\n      }) => ({\n        events: [...events, newEvent],\n        isOpen: false\n      }));\n    };\n\n    this.handleSelectEvent = event => {\n      this.setState({\n        selectedEvent: event,\n        isOpen: true\n      });\n    };\n\n    this.handleUpdateEvent = updatedEvent => {\n      this.setState(({\n        events\n      }) => ({\n        events: events.map(event => {\n          if (event.id === updatedEvent.id) {\n            return _objectSpread({}, updatedEvent);\n          } else {\n            return event;\n          }\n        }),\n        isOpen: false,\n        selectedEvent: null\n      }));\n    };\n\n    this.handleDeleteEvent = id => {\n      this.setState(({\n        events\n      }) => ({\n        events: events.filter(e => e.id !== id)\n      }));\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          events = _this$state.events,\n          isOpen = _this$state.isOpen,\n          selectedEvent = _this$state.selectedEvent;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      events: events,\n      selectEvent: this.handleSelectEvent,\n      deleteEvent: this.handleDeleteEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Button, {\n      positive: true,\n      content: \"Create Event\",\n      onClick: this.handleCreateFormOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), isOpen && React.createElement(EventForm, {\n      key: selectedEvent ? selectedEvent.id : 0,\n      selectedEvent: selectedEvent,\n      cancelFormOpen: this.handleFormCancel,\n      createEvent: this.handleCreateEvent,\n      updateEvent: this.handleUpdateEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default EventDashboard;","map":{"version":3,"sources":["C:\\Users\\Dell Precision\\Documents\\ReactNativeDemo\\my-app\\src\\features\\event\\eventDashboard\\EventDashboard.jsx"],"names":["React","Component","Grid","Button","EventList","EventForm","cuid","eventsFromDashboard","id","title","date","category","description","city","venue","hostedBy","hostPhotoURL","attendees","name","photoURL","EventDashboard","state","events","isOpen","selectedEvent","handleCreateFormOpen","setState","handleFormCancel","handleCreateEvent","newEvent","handleSelectEvent","event","handleUpdateEvent","updatedEvent","map","handleDeleteEvent","filter","e","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Grid, Button } from 'semantic-ui-react';\r\n\r\nimport EventList from '../EventList/EventList';\r\n\r\nimport EventForm from '../EventForm/EventForm';\r\n\r\nimport cuid from 'cuid';\r\n\r\nconst eventsFromDashboard = [\r\n  {\r\n    id: '1',\r\n\r\n    title: 'Trip to Tower of London',\r\n\r\n    date: '2018-03-27',\r\n\r\n    category: 'culture',\r\n\r\n    description:\r\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\r\n\r\n    city: 'London, UK',\r\n\r\n    venue: \"Tower of London, St Katharine's & Wapping, London\",\r\n\r\n    hostedBy: 'Bob',\r\n\r\n    hostPhotoURL: 'https://randomuser.me/api/portraits/men/20.jpg',\r\n\r\n    attendees: [\r\n      {\r\n        id: 'a',\r\n\r\n        name: 'Bob',\r\n\r\n        photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\r\n      },\r\n\r\n      {\r\n        id: 'b',\r\n\r\n        name: 'Tom',\r\n\r\n        photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\r\n      }\r\n    ]\r\n  },\r\n\r\n  {\r\n    id: '2',\r\n\r\n    title: 'Trip to Punch and Judy Pub',\r\n\r\n    date: '2018-03-28',\r\n\r\n    category: 'drinks',\r\n\r\n    description:\r\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\r\n\r\n    city: 'London, UK',\r\n\r\n    venue: 'Punch & Judy, Henrietta Street, London, UK',\r\n\r\n    hostedBy: 'Tom',\r\n\r\n    hostPhotoURL: 'https://randomuser.me/api/portraits/men/22.jpg',\r\n\r\n    attendees: [\r\n      {\r\n        id: 'b',\r\n\r\n        name: 'Tom',\r\n\r\n        photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\r\n      },\r\n\r\n      {\r\n        id: 'a',\r\n\r\n        name: 'Bob',\r\n\r\n        photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nclass EventDashboard extends Component {\r\n  state = {\r\n    events: eventsFromDashboard,\r\n\r\n    isOpen: false,\r\n\r\n    selectedEvent: null\r\n  };\r\n\r\n  // handleIsOpenToggle = () => {\r\n\r\n  //   this.setState(({ isOpen }) => ({\r\n\r\n  //     isOpen: !isOpen\r\n\r\n  //   }));\r\n\r\n  // };\r\n\r\n  handleCreateFormOpen = () => {\r\n    this.setState({\r\n      isOpen: true,\r\n\r\n      selectedEvent: null\r\n    });\r\n  };\r\n\r\n  handleFormCancel = () => {\r\n    this.setState({\r\n      isOpen: false\r\n    });\r\n  };\r\n\r\n  handleCreateEvent = newEvent => {\r\n    newEvent.id = cuid();\r\n\r\n    newEvent.hostPhotoURL = '/assets/user.png';\r\n\r\n    this.setState(({ events }) => ({\r\n      events: [...events, newEvent],\r\n\r\n      isOpen: false\r\n    }));\r\n  };\r\n\r\n  handleSelectEvent = event => {\r\n    this.setState({\r\n      selectedEvent: event,\r\n\r\n      isOpen: true\r\n    });\r\n  };\r\n\r\n  handleUpdateEvent = updatedEvent => {\r\n    this.setState(({ events }) => ({\r\n      events: events.map(event => {\r\n        if (event.id === updatedEvent.id) {\r\n          return { ...updatedEvent };\r\n        } else {\r\n          return event;\r\n        }\r\n      }),\r\n\r\n      isOpen: false,\r\n\r\n      selectedEvent: null\r\n    }));\r\n  };\r\n\r\n  handleDeleteEvent = id => {\r\n    this.setState(({ events }) => ({\r\n      events: events.filter(e => e.id !== id)\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { events, isOpen, selectedEvent } = this.state;\r\n\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <EventList\r\n            events={events}\r\n            selectEvent={this.handleSelectEvent}\r\n            deleteEvent={this.handleDeleteEvent}\r\n          />\r\n        </Grid.Column>\r\n\r\n        <Grid.Column width={6}>\r\n          <Button\r\n            positive\r\n            content=\"Create Event\"\r\n            onClick={this.handleCreateFormOpen}\r\n          />\r\n\r\n          {isOpen && (\r\n            <EventForm\r\n              key={selectedEvent ? selectedEvent.id : 0}\r\n              selectedEvent={selectedEvent}\r\n              cancelFormOpen={this.handleFormCancel}\r\n              createEvent={this.handleCreateEvent}\r\n              updateEvent={this.handleUpdateEvent}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventDashboard;\r\n"]},"metadata":{},"sourceType":"module"}