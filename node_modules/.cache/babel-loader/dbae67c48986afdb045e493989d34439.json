{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell Precision\\\\Documents\\\\ReactNativeDemo\\\\my-app\\\\src\\\\features\\\\event\\\\EventDashboard\\\\EventDashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport EventList from '../EventList/EventList';\nimport EventForm from '../EventForm/EventForm';\nimport cuid from 'cuid';\nimport { createEvent, deleteEvent, updateEvent } from '../eventActions';\n\nconst mapState = state => ({\n  events: state.events\n});\n\nconst actions = {\n  createEvent,\n  deleteEvent,\n  updateEvent\n};\n\nclass EventDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //events: eventsFromDashboard,\n      isOpen: false,\n      selectedEvent: null\n    };\n\n    this.handleCreateEvent = newEvent => {\n      newEvent.id = cuid();\n      newEvent.hostPhotoURL = '/assets/user.png';\n      this.props.createEvent(newEvent);\n      this.setState(({\n        events\n      }) => ({\n        isOpen: false\n      }));\n    };\n\n    this.handleSelectEvent = event => {\n      this.setState({\n        selectedEvent: event,\n        isOpen: true\n      });\n    };\n\n    this.handleUpdateEvent = updatedEvent => {\n      this.props.updateEvent(updatedEvent);\n      this.setState(({\n        events\n      }) => ({\n        isOpen: false,\n        selectedEvent: null\n      }));\n    };\n\n    this.handleDeleteEvent = id => {\n      this.props.deleteEvent(id);\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          isOpen = _this$state.isOpen,\n          selectedEvent = _this$state.selectedEvent;\n    const events = this.props.events;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      events: events,\n      selectEvent: this.handleSelectEvent,\n      deleteEvent: this.handleDeleteEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Button, {\n      positive: true,\n      content: \"Create Event\",\n      onClick: this.handleCreateFormOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), isOpen && React.createElement(EventForm, {\n      key: selectedEvent ? selectedEvent.id : 0,\n      selectedEvent: selectedEvent,\n      cancelFormOpen: this.handleFormCancel,\n      createEvent: this.handleCreateEvent,\n      updateEvent: this.handleUpdateEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(mapState, actions)(EventDashboard);","map":{"version":3,"sources":["C:\\Users\\Dell Precision\\Documents\\ReactNativeDemo\\my-app\\src\\features\\event\\EventDashboard\\EventDashboard.jsx"],"names":["React","Component","Grid","Button","connect","EventList","EventForm","cuid","createEvent","deleteEvent","updateEvent","mapState","state","events","actions","EventDashboard","isOpen","selectedEvent","handleCreateEvent","newEvent","id","hostPhotoURL","props","setState","handleSelectEvent","event","handleUpdateEvent","updatedEvent","handleDeleteEvent","render","handleCreateFormOpen","handleFormCancel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport {connect} from 'react-redux';\nimport EventList from '../EventList/EventList';\nimport EventForm from '../EventForm/EventForm';\nimport cuid from 'cuid';\nimport {createEvent, deleteEvent, updateEvent} from '../eventActions'\n\nconst mapState = (state) => ({\n  events: state.events\n})\n\nconst actions = {\n  createEvent,\n  deleteEvent,\n  updateEvent\n}\n\nclass EventDashboard extends Component {\n  state = {\n    //events: eventsFromDashboard,\n    isOpen: false,\n    selectedEvent: null\n  };\n\n\n  handleCreateEvent = newEvent => {\n    newEvent.id = cuid();\n    newEvent.hostPhotoURL = '/assets/user.png';\n    this.props.createEvent(newEvent);\n    this.setState(({ events }) => ({\n      isOpen: false\n    }));\n  };\n\n  handleSelectEvent = event => {\n    this.setState({\n      selectedEvent: event,\n      isOpen: true\n    });\n  };\n\n  handleUpdateEvent = updatedEvent => {\n    this.props.updateEvent(updatedEvent);\n    this.setState(({ events }) => ({\n      isOpen: false,\n      selectedEvent: null\n    }));\n  };\n\n  handleDeleteEvent = id => {\n    this.props.deleteEvent(id);\n  };\n\n  render() {\n    const { isOpen, selectedEvent } = this.state;\n    const { events } = this.props;\n    return (\n      <Grid>\n        <Grid.Column width={10}>\n          <EventList\n            events={events}\n            selectEvent={this.handleSelectEvent}\n            deleteEvent={this.handleDeleteEvent}\n          />\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <Button\n            positive\n            content='Create Event'\n            onClick={this.handleCreateFormOpen}\n          />\n          {isOpen && (\n            <EventForm\n              key={selectedEvent ? selectedEvent.id : 0}\n              selectedEvent={selectedEvent}\n              cancelFormOpen={this.handleFormCancel}\n              createEvent={this.handleCreateEvent}\n              updateEvent={this.handleUpdateEvent}\n            />\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default connect(mapState, actions)(EventDashboard);\n"]},"metadata":{},"sourceType":"module"}