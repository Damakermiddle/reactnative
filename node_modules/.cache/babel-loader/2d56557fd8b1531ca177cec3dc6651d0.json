{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell Precision\\\\Documents\\\\ReactNativeDemo\\\\my-app\\\\src\\\\features\\\\event\\\\eventDashboard\\\\EventDashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport EventList from '../eventList/EventList';\nimport EventForm from '../EventForm/EventForm';\nconst eventsFromDashboard = [{\n  id: '1',\n  title: 'Trip to Tower of London',\n  date: '2018-03-27T11:00:00+00:00',\n  category: 'culture',\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\n  city: 'London, UK',\n  venue: \"Tower of London, St Katharine's & Wapping, London\",\n  hostedBy: 'Bob',\n  hostPhotoURL: 'https://randomuser.me/api/portraits/men/20.jpg',\n  attendees: [{\n    id: 'a',\n    name: 'Bob',\n    photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\n  }, {\n    id: 'b',\n    name: 'Tom',\n    photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\n  }]\n}, {\n  id: '2',\n  title: 'Trip to Punch and Judy Pub',\n  date: '2018-03-28T14:00:00+00:00',\n  category: 'drinks',\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\n  city: 'London, UK',\n  venue: 'Punch & Judy, Henrietta Street, London, UK',\n  hostedBy: 'Tom',\n  hostPhotoURL: 'https://randomuser.me/api/portraits/men/22.jpg',\n  attendees: [{\n    id: 'b',\n    name: 'Tom',\n    photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\n  }, {\n    id: 'a',\n    name: 'Bob',\n    photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\n  }]\n}];\n\nclass EventDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: eventsFromDashboard,\n      isOpen: false\n    };\n\n    this.handleIsOpenToggle = () => {\n      this.setState(({\n        isOpen\n      }) => ({\n        isOpen: !isOpen\n      }));\n    };\n\n    this.handleCreateEvent = newEvent => {\n      newEvent.id = cuid();\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          events = _this$state.events,\n          isOpen = _this$state.isOpen;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      events: events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleIsOpenToggle,\n      positive: true,\n      content: \"Create Event\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), isOpen && React.createElement(EventForm, {\n      cancelFormOpen: this.handleIsOpenToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default EventDashboard;","map":{"version":3,"sources":["C:\\Users\\Dell Precision\\Documents\\ReactNativeDemo\\my-app\\src\\features\\event\\eventDashboard\\EventDashboard.jsx"],"names":["React","Component","Grid","Button","EventList","EventForm","eventsFromDashboard","id","title","date","category","description","city","venue","hostedBy","hostPhotoURL","attendees","name","photoURL","EventDashboard","state","events","isOpen","handleIsOpenToggle","setState","handleCreateEvent","newEvent","cuid","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Grid, Button } from 'semantic-ui-react'\r\nimport EventList from '../eventList/EventList'\r\nimport EventForm from '../EventForm/EventForm'\r\n\r\nconst eventsFromDashboard = [\r\n  {\r\n    id: '1',\r\n    title: 'Trip to Tower of London',\r\n    date: '2018-03-27T11:00:00+00:00',\r\n    category: 'culture',\r\n    description:\r\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\r\n    city: 'London, UK',\r\n    venue: \"Tower of London, St Katharine's & Wapping, London\",\r\n    hostedBy: 'Bob',\r\n    hostPhotoURL: 'https://randomuser.me/api/portraits/men/20.jpg',\r\n    attendees: [\r\n      {\r\n        id: 'a',\r\n        name: 'Bob',\r\n        photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\r\n      },\r\n      {\r\n        id: 'b',\r\n        name: 'Tom',\r\n        photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Trip to Punch and Judy Pub',\r\n    date: '2018-03-28T14:00:00+00:00',\r\n    category: 'drinks',\r\n    description:\r\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\r\n    city: 'London, UK',\r\n    venue: 'Punch & Judy, Henrietta Street, London, UK',\r\n    hostedBy: 'Tom',\r\n    hostPhotoURL: 'https://randomuser.me/api/portraits/men/22.jpg',\r\n    attendees: [\r\n      {\r\n        id: 'b',\r\n        name: 'Tom',\r\n        photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\r\n      },\r\n      {\r\n        id: 'a',\r\n        name: 'Bob',\r\n        photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\n\r\nclass EventDashboard extends Component {\r\n  state = {\r\n    events: eventsFromDashboard,\r\n    isOpen: false\r\n  }\r\n\r\n  handleIsOpenToggle = () => {\r\n    this.setState(({isOpen}) => ({\r\n      isOpen: !isOpen\r\n    }))\r\n  }\r\n\r\n  handleCreateEvent = (newEvent) => {\r\n    newEvent.id = cuid()\r\n  }\r\n\r\n  render() {\r\n    const {events, isOpen} = this.state\r\n        return (\r\n            <Grid>\r\n                <Grid.Column width={10}>\r\n                    <EventList events={events} />\r\n                </Grid.Column>\r\n                <Grid.Column width={6}>\r\n                    <Button onClick={this.handleIsOpenToggle} positive content='Create Event' />\r\n                    {isOpen && <EventForm cancelFormOpen={this.handleIsOpenToggle} />}   \r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EventDashboard;"]},"metadata":{},"sourceType":"module"}