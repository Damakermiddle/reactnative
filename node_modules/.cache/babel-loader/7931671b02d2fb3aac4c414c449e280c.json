{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Dell Precision\\\\Documents\\\\ReactNativeDemo\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell Precision\\\\Documents\\\\ReactNativeDemo\\\\my-app\\\\src\\\\features\\\\event\\\\EventDashboard\\\\EventDashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport EventList from '../EventList/EventList';\nimport EventForm from '../EventForm/EventForm';\nimport cuid from 'cuid';\nimport { createEvent, deleteEvent, updateEvent } from '../eventActions';\n\nconst mapState = state => ({\n  events: state.events\n});\n\nconst actions = {\n  createEvent,\n  deleteEvent,\n  update\n};\n\nclass EventDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //events: eventsFromDashboard,\n      isOpen: false,\n      selectedEvent: null\n    };\n\n    this.handleCreateFormOpen = () => {\n      this.setState({\n        isOpen: true,\n        selectedEvent: null\n      });\n    };\n\n    this.handleFormCancel = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.handleCreateEvent = newEvent => {\n      newEvent.id = cuid();\n      newEvent.hostPhotoURL = '/assets/user.png';\n      this.setState(({\n        events\n      }) => ({\n        events: [...events, newEvent],\n        isOpen: false\n      }));\n    };\n\n    this.handleSelectEvent = event => {\n      this.setState({\n        selectedEvent: event,\n        isOpen: true\n      });\n    };\n\n    this.handleUpdateEvent = updatedEvent => {\n      this.setState(({\n        events\n      }) => ({\n        events: events.map(event => {\n          if (event.id === updatedEvent.id) {\n            return _objectSpread({}, updatedEvent);\n          } else {\n            return event;\n          }\n        }),\n        isOpen: false,\n        selectedEvent: null\n      }));\n    };\n\n    this.handleDeleteEvent = id => {\n      this.setState(({\n        events\n      }) => ({\n        events: events.filter(e => e.id !== id)\n      }));\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          isOpen = _this$state.isOpen,\n          selectedEvent = _this$state.selectedEvent;\n    const events = this.props.events;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      events: events,\n      selectEvent: this.handleSelectEvent,\n      deleteEvent: this.handleDeleteEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Button, {\n      positive: true,\n      content: \"Create Event\",\n      onClick: this.handleCreateFormOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), isOpen && React.createElement(EventForm, {\n      key: selectedEvent ? selectedEvent.id : 0,\n      selectedEvent: selectedEvent,\n      cancelFormOpen: this.handleFormCancel,\n      createEvent: this.handleCreateEvent,\n      updateEvent: this.handleUpdateEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default connect(mapState)(EventDashboard);","map":{"version":3,"sources":["C:\\Users\\Dell Precision\\Documents\\ReactNativeDemo\\my-app\\src\\features\\event\\EventDashboard\\EventDashboard.jsx"],"names":["React","Component","Grid","Button","connect","EventList","EventForm","cuid","createEvent","deleteEvent","updateEvent","mapState","state","events","actions","update","EventDashboard","isOpen","selectedEvent","handleCreateFormOpen","setState","handleFormCancel","handleCreateEvent","newEvent","id","hostPhotoURL","handleSelectEvent","event","handleUpdateEvent","updatedEvent","map","handleDeleteEvent","filter","e","render","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport {connect} from 'react-redux';\nimport EventList from '../EventList/EventList';\nimport EventForm from '../EventForm/EventForm';\nimport cuid from 'cuid';\nimport {createEvent, deleteEvent, updateEvent} from '../eventActions'\n\nconst mapState = (state) => ({\n  events: state.events\n})\n\nconst actions = {\n  createEvent,\n  deleteEvent,\n  update\n}\n\nclass EventDashboard extends Component {\n  state = {\n    //events: eventsFromDashboard,\n    isOpen: false,\n    selectedEvent: null\n  };\n\n  // handleIsOpenToggle = () => {\n  //   this.setState(({ isOpen }) => ({\n  //     isOpen: !isOpen\n  //   }));\n  // };\n\n  handleCreateFormOpen = () => {\n    this.setState({\n      isOpen: true,\n      selectedEvent: null\n    });\n  };\n\n  handleFormCancel = () => {\n    this.setState({\n      isOpen: false\n    });\n  };\n\n  handleCreateEvent = newEvent => {\n    newEvent.id = cuid();\n    newEvent.hostPhotoURL = '/assets/user.png';\n    this.setState(({ events }) => ({\n      events: [...events, newEvent],\n      isOpen: false\n    }));\n  };\n\n  handleSelectEvent = event => {\n    this.setState({\n      selectedEvent: event,\n      isOpen: true\n    });\n  };\n\n  handleUpdateEvent = updatedEvent => {\n    this.setState(({ events }) => ({\n      events: events.map(event => {\n        if (event.id === updatedEvent.id) {\n          return { ...updatedEvent };\n        } else {\n          return event;\n        }\n      }),\n      isOpen: false,\n      selectedEvent: null\n    }));\n  };\n\n  handleDeleteEvent = id => {\n    this.setState(({ events }) => ({\n      events: events.filter(e => e.id !== id)\n    }));\n  };\n\n  render() {\n    const { isOpen, selectedEvent } = this.state;\n    const { events } = this.props;\n    return (\n      <Grid>\n        <Grid.Column width={10}>\n          <EventList\n            events={events}\n            selectEvent={this.handleSelectEvent}\n            deleteEvent={this.handleDeleteEvent}\n          />\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <Button\n            positive\n            content='Create Event'\n            onClick={this.handleCreateFormOpen}\n          />\n          {isOpen && (\n            <EventForm\n              key={selectedEvent ? selectedEvent.id : 0}\n              selectedEvent={selectedEvent}\n              cancelFormOpen={this.handleFormCancel}\n              createEvent={this.handleCreateEvent}\n              updateEvent={this.handleUpdateEvent}\n            />\n          )}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default connect(mapState)(EventDashboard);\n"]},"metadata":{},"sourceType":"module"}