{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell Precision\\\\Documents\\\\ReactNativeDemo\\\\my-app\\\\src\\\\features\\\\event\\\\eventDashboard\\\\EventDashboard.jsx\";\nimport React, { Component } from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport EventList from '../eventList/EventList';\nimport EventForm from '../EventForm/EventForm';\nimport cuid from 'cuid';\nconst eventsFromDashboard = [{\n  id: '1',\n  title: 'Trip to Tower of London',\n  date: '2018-03-27T11:00:00+00:00',\n  category: 'culture',\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\n  city: 'London, UK',\n  venue: \"Tower of London, St Katharine's & Wapping, London\",\n  hostedBy: 'Bob',\n  hostPhotoURL: 'https://randomuser.me/api/portraits/men/20.jpg',\n  attendees: [{\n    id: 'a',\n    name: 'Bob',\n    photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\n  }, {\n    id: 'b',\n    name: 'Tom',\n    photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\n  }]\n}, {\n  id: '2',\n  title: 'Trip to Punch and Judy Pub',\n  date: '2018-03-28T14:00:00+00:00',\n  category: 'drinks',\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\n  city: 'London, UK',\n  venue: 'Punch & Judy, Henrietta Street, London, UK',\n  hostedBy: 'Tom',\n  hostPhotoURL: 'https://randomuser.me/api/portraits/men/22.jpg',\n  attendees: [{\n    id: 'b',\n    name: 'Tom',\n    photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\n  }, {\n    id: 'a',\n    name: 'Bob',\n    photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\n  }]\n}];\n\nclass EventDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      events: eventsFromDashboard,\n      isOpen: false,\n      selectedEvent: null\n    };\n\n    this.handleCreateFormOpen = () => {\n      this.setState({\n        isOpen: true,\n        selectedEvent: null\n      });\n    };\n\n    this.handleFormCancel = () => {\n      this.setState;\n    };\n\n    this.handleCreateEvent = newEvent => {\n      newEvent.id = cuid();\n      newEvent.hostPhotoURL = '/assets/user.png';\n      this.setState(({\n        events\n      }) => ({\n        events: [...events, newEvent],\n        isOpen: false\n      }));\n    };\n\n    this.handleSelectEvent = event => {\n      this.setState({\n        selectedEvent: event,\n        isOpen: true\n      });\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          events = _this$state.events,\n          isOpen = _this$state.isOpen,\n          selectedEvent = _this$state.selectedEvent;\n    return React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(EventList, {\n      events: events,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleIsOpenToggle,\n      positive: true,\n      content: \"Create Event\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), isOpen && React.createElement(EventForm, {\n      createEvent: this.handleCreateEvent,\n      cancelFormOpen: this.handleIsOpenToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default EventDashboard;","map":{"version":3,"sources":["C:\\Users\\Dell Precision\\Documents\\ReactNativeDemo\\my-app\\src\\features\\event\\eventDashboard\\EventDashboard.jsx"],"names":["React","Component","Grid","Button","EventList","EventForm","cuid","eventsFromDashboard","id","title","date","category","description","city","venue","hostedBy","hostPhotoURL","attendees","name","photoURL","EventDashboard","state","events","isOpen","selectedEvent","handleCreateFormOpen","setState","handleFormCancel","handleCreateEvent","newEvent","handleSelectEvent","event","render","handleIsOpenToggle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Button } from 'semantic-ui-react';\r\nimport EventList from '../eventList/EventList';\r\nimport EventForm from '../EventForm/EventForm';\r\nimport cuid from 'cuid';\r\n\r\nconst eventsFromDashboard = [\r\n  {\r\n    id: '1',\r\n    title: 'Trip to Tower of London',\r\n    date: '2018-03-27T11:00:00+00:00',\r\n    category: 'culture',\r\n    description:\r\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\r\n    city: 'London, UK',\r\n    venue: \"Tower of London, St Katharine's & Wapping, London\",\r\n    hostedBy: 'Bob',\r\n    hostPhotoURL: 'https://randomuser.me/api/portraits/men/20.jpg',\r\n    attendees: [\r\n      {\r\n        id: 'a',\r\n        name: 'Bob',\r\n        photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\r\n      },\r\n      {\r\n        id: 'b',\r\n        name: 'Tom',\r\n        photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Trip to Punch and Judy Pub',\r\n    date: '2018-03-28T14:00:00+00:00',\r\n    category: 'drinks',\r\n    description:\r\n      'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sollicitudin ligula eu leo tincidunt, quis scelerisque magna dapibus. Sed eget ipsum vel arcu vehicula ullamcorper.',\r\n    city: 'London, UK',\r\n    venue: 'Punch & Judy, Henrietta Street, London, UK',\r\n    hostedBy: 'Tom',\r\n    hostPhotoURL: 'https://randomuser.me/api/portraits/men/22.jpg',\r\n    attendees: [\r\n      {\r\n        id: 'b',\r\n        name: 'Tom',\r\n        photoURL: 'https://randomuser.me/api/portraits/men/22.jpg'\r\n      },\r\n      {\r\n        id: 'a',\r\n        name: 'Bob',\r\n        photoURL: 'https://randomuser.me/api/portraits/men/20.jpg'\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nclass EventDashboard extends Component {\r\n  state = {\r\n    events: eventsFromDashboard,\r\n    isOpen: false,\r\n    selectedEvent: null\r\n  };\r\n\r\n  // handleIsOpenToggle = () => {\r\n  //   this.setState(({ isOpen }) => ({\r\n  //     isOpen: !isOpen\r\n  //   }));\r\n  // };\r\n\r\n  handleCreateFormOpen = () => {\r\n    this.setState({\r\n      isOpen: true,\r\n      selectedEvent: null\r\n    })\r\n  }\r\n\r\n  handleFormCancel = () => {\r\n    this.setState\r\n  }\r\n\r\n  handleCreateEvent = newEvent => {\r\n    newEvent.id = cuid();\r\n    newEvent.hostPhotoURL = '/assets/user.png';\r\n    this.setState(({ events }) => ({\r\n      events: [...events, newEvent],\r\n      isOpen: false\r\n    }));\r\n  };\r\n\r\n  handleSelectEvent = (event) => {\r\n    this.setState({\r\n      selectedEvent: event,\r\n      isOpen: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { events, isOpen, selectedEvent } = this.state;\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <EventList events={events} />\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <Button\r\n            onClick={this.handleIsOpenToggle}\r\n            positive\r\n            content=\"Create Event\"\r\n          />\r\n          {isOpen && (\r\n            <EventForm\r\n              createEvent={this.handleCreateEvent}\r\n              cancelFormOpen={this.handleIsOpenToggle}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventDashboard;\r\n"]},"metadata":{},"sourceType":"module"}